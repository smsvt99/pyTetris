{"version":3,"sources":["johnny_fever/johnnyFever.ttf","UI/UiBlock.tsx","UI/UiRow.tsx","Block.ts","CurrentPiece.ts","Row.ts","Board.tsx","UI/Form.tsx","UI/Score.tsx","App.tsx","serviceWorker.ts","store/index.js","store/emptyBoard.ts","index.tsx"],"names":["module","exports","Block","props","key","style","value","color","gameOver","height","width","display","margin","border","borderColor","background","position","opacity","getStyle","className","isInFullRow","index","Row","rowId","blocks","row","map","UiBlock","isFull","padding","columnId","blockToLeft","blockToRight","blockBelow","isEqualTo","block","this","CurrentPiece","board","currentPosition","lockCurrentPosition","nextPosition","axis","newPiece","getNextPosition","nextPiece","generate","forEach","newPosition","newColumnId","newRowId","isValidPosition","setNextPosition","direction","proposedPosition","currentPositionString","JSON","stringify","difference","filter","includes","length","error","shapes","Math","floor","random","Board","boardArray","rows","nextBoard","getFullRows","fullRows","push","removeFullRows","console","log","Form","state","name","commonStyle","backgroundColor","borderRadius","fontFamily","fontSize","maxWidth","buttonStyle","cursor","marginTop","inputStyle","textAlign","handleChange","e","setState","target","submit","body","score","fetch","method","redirect","headers","then","res","window","location","href","type","onChange","maxLength","onClick","React","Component","Score","variableText","gameStarted","bottom","scoreBoard","highScores","animation","box","lineHeight","marginLeft","marginBottom","startGame","App","useSelector","currentPiece","gravityActive","dispatch","useDispatch","undefined","json","scores","boardCopy","pauseForAnimation","Boolean","valueOf","nextScore","pow","removeFromBoard","addToBoard","setTimeout","trackPiece","addNextToBoard","currentPiecePosition","document","addEventListener","handler","move","removeEventListener","rotate","setInterval","event","KeyboardEvent","dispatchEvent","paddingTop","justifyContent","flexDirection","alignItems","UiRow","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","initialState","store","createStore","action","Object","assign","ReactDOM","render","getElementById","URL","process","origin","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6b4f942f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/johnnyFever.dac54f72.ttf\";","import React, { CSSProperties } from 'react';\r\n\r\ntype blockProps = {\r\n    // columnId : number,\r\n    // rowId : number,\r\n    value: string,\r\n    key: string,\r\n    isInFullRow: boolean,\r\n    index: number,\r\n    gameOver: boolean\r\n}\r\n\r\nconst Block: React.FC<blockProps> = (props) => {\r\n    const { key, value } = props;\r\n\r\n    // const shine: CSSProperties = {\r\n    //     width: '5px',\r\n    //     height: '10px',\r\n    //     border: 'solid 3px',\r\n    //     borderColor: 'rgba(255, 255, 255, 0) transparent transparent transparent',\r\n    //     borderRadius: '70%',\r\n    //     transform: 'rotate(45deg)',\r\n    //     margin: '3px 8px'\r\n    // }\r\n    // const noShine: CSSProperties = {\r\n    //     width: '5px',\r\n    //     height: '10px',\r\n    //     border: 'solid 3px transparent',\r\n    //     borderRadius: '70%',\r\n    //     margin: '3px 8px',\r\n\r\n    // }\r\n\r\n    const getStyle = (value: string): CSSProperties => {\r\n\r\n        let color: string;\r\n        // let shadow: string = 'inset 2px -2px 0px 0px rgba(0,0,0,0.4)'\r\n        // let shadow: string = 'none';\r\n\r\n        if(props.gameOver) value = 'e';\r\n\r\n        switch (value) {\r\n            case 'e': color = '#111929'; break;\r\n            case 'b': color = 'deepSkyBlue'; break;\r\n            case 'o': color = 'orangered'; break;\r\n            case 'g': color = 'lime'; break;\r\n            case 'p': color = 'slateblue'; break;\r\n            case 'br': color = 'red'; break;\r\n            case 'y': color = 'gold'; break;\r\n            case 'r': color = 'deeppink'; break;\r\n            default: color = 'pink'; break;\r\n        }\r\n\r\n        // switch (value) {\r\n        //     case 'e': color = '#111929'; shadow = 'none'; break;\r\n        //     case 'b': color = '#2ba1d4'; break;\r\n        //     case 'o': color = '#fc8f4d'; break;\r\n        //     case 'g': color = '#deea70'; break;\r\n        //     case 'p': color = '#ea69d2'; break;\r\n        //     case 'br': color = '#f35669'; break;\r\n        //     case 'y': color = '#8672e1'; break;\r\n        //     case 'r': color = '#63a888'; break;\r\n        //     default: color = 'pink'; break;\r\n        // }\r\n\r\n        return {\r\n            height: '26px',\r\n            width: '26px',\r\n            display: 'inline-block',\r\n            margin: '0px 2px',\r\n            border: '1px solid rgba(255,255,255, .3)',\r\n            // border: '2px solid #202a34',\r\n            // border: '2px solid rgb(48,48,48)',\r\n            borderColor: value === 'e' ? 'rgba(255,255,255,.3)' : '#111929',\r\n            // borderRadius: '50%',\r\n            // borderRadius: '15px',\r\n            background: color,\r\n            position: 'relative',\r\n            opacity: '.9'\r\n        }\r\n    }\r\n\r\n    const style: CSSProperties = getStyle(value)\r\n\r\n    return <div\r\n        style={style}\r\n        key={key}\r\n        className={props.isInFullRow || props.gameOver ? `t${\"\" + props.index} animated` : \"\"}\r\n    >\r\n    </div>\r\n}\r\n\r\nexport default Block;","import UiBlock from './UiBlock'; \r\nimport React from 'react'; \r\n \r\ntype rowProps = {\r\n    rowId: number,\r\n    row: string[],\r\n    isFull: boolean,\r\n    key: number,\r\n    gameOver: boolean\r\n}\r\n \r\nconst Row: React.FC<rowProps> = (props: rowProps) => {\r\n\r\n    const rowId: number = props.rowId;\r\n    const blocks: JSX.Element[] = props.row.map((value, index) => \r\n        <UiBlock \r\n            key={\"\" + index + rowId}\r\n            value={value}\r\n            isInFullRow={props.isFull} \r\n            index={index}\r\n            gameOver={props.gameOver}\r\n        />\r\n    );\r\n\r\n    return <div \r\n        key={rowId}\r\n        style={{padding: 0}}\r\n        >{blocks}</div>\r\n}\r\n\r\nexport default Row;","// import React, { Component, CSSProperties } from 'react';\r\nimport { PiecePosition } from './Types';\r\n\r\ntype blockProps = {\r\n    columnId : number,\r\n    rowId : number,\r\n    value : string,\r\n}\r\n\r\nclass Block{  \r\n\r\n    value: string;\r\n    rowId: number;\r\n    columnId: number;\r\n\r\n    constructor(value: string, rowId: number, columnId: number){\r\n        this.columnId = columnId;\r\n        this.rowId = rowId;\r\n        this.value = value;\r\n    }\r\n\r\n    blockToLeft = (): Block => {\r\n        return new Block(this.value, this.rowId, this.columnId - 1);\r\n    }\r\n\r\n    blockToRight = (): Block => {\r\n        return new Block(this.value, this.rowId, this.columnId + 1);\r\n    }\r\n\r\n    blockBelow = (): Block => {\r\n        return new Block(this.value, this.rowId + 1, this.columnId);\r\n    }\r\n\r\n    isEqualTo = (block: Block): boolean => {\r\n        return block.rowId === this.rowId && block.columnId === this.columnId;\r\n    }\r\n}\r\n\r\nexport default Block;","import Block from './Block';\r\nimport { PiecePosition, BoardArray } from './Types'\r\n\r\nclass CurrentPiece {\r\n\r\n    currentPosition: PiecePosition;\r\n    lockCurrentPosition: boolean = false;\r\n    nextPosition: PiecePosition;\r\n    board: BoardArray;\r\n    axis: Block;\r\n    newPiece: boolean = false;\r\n\r\n    constructor(board: BoardArray, position: PiecePosition | undefined) {\r\n        this.board = board;\r\n\r\n        if(position){\r\n            this.currentPosition = position;\r\n            this.nextPosition = position;\r\n            this.axis = position[0];\r\n        } else {\r\n            const nextPiece: PiecePosition = this.generate();\r\n            this.currentPosition = nextPiece;\r\n            this.nextPosition = nextPiece;\r\n            this.axis = nextPiece[0];\r\n        }\r\n    }\r\n\r\n    removeFromBoard(board: BoardArray): BoardArray{\r\n        this.currentPosition.forEach((block: Block): void => {\r\n            board[block.rowId][block.columnId] = 'e';\r\n        })\r\n        return board;\r\n    }\r\n\r\n    addToBoard(board: BoardArray): BoardArray{\r\n        this.currentPosition.forEach((block: Block): void => {\r\n            board[block.rowId][block.columnId] = block.value;\r\n        })\r\n        return board;\r\n    }\r\n\r\n    addNextToBoard(board: BoardArray): BoardArray{\r\n        this.nextPosition.forEach((block: Block): void => {\r\n            board[block.rowId][block.columnId] = block.value\r\n        })\r\n        return board;\r\n    }\r\n\r\n    rotate(): boolean {\r\n\r\n        const newPosition: PiecePosition = this.currentPosition.map((block: Block, index) => {\r\n            const newColumnId = ((this.axis.rowId - block.rowId) * -1) + this.axis.columnId;\r\n            const newRowId = (this.axis.columnId - block.columnId) + this.axis.rowId;\r\n\r\n            return new Block(\r\n                block.value,\r\n                newRowId,\r\n                newColumnId\r\n            )\r\n        }) as PiecePosition\r\n\r\n        if (this.isValidPosition(newPosition)) {\r\n            this.setNextPosition(newPosition)\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    move(direction: string): boolean {\r\n        const proposedPosition = this.currentPosition.map((block: Block): Block => {\r\n            switch (direction) {\r\n                case \"ArrowLeft\":\r\n                    return block.blockToLeft();\r\n                case \"ArrowRight\":\r\n                    return block.blockToRight();\r\n                case \"ArrowDown\":\r\n                    return block.blockBelow();\r\n                default:\r\n                    return block;\r\n            }\r\n        }) as PiecePosition\r\n\r\n        if (this.isValidPosition(proposedPosition)) {\r\n            this.setNextPosition(proposedPosition)\r\n            return true;\r\n\r\n        } else if (direction === \"ArrowDown\") { //this.move(\"ArrowDown\") will always return true and alter state\r\n            this.setNextPosition(this.generate())\r\n            this.lockCurrentPosition = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isValidPosition(proposedPosition: PiecePosition): boolean {\r\n        const currentPositionString: string[] = this.currentPosition.map((block: Block) => {\r\n            return JSON.stringify(block);\r\n        })\r\n        // i.e., the proposed position with the blocks it has in common with the current position having been subtracted\r\n        const difference: Block[] = proposedPosition.filter((block: Block) => {\r\n            return !currentPositionString.includes(JSON.stringify(block));\r\n        })\r\n\r\n        for (let block of difference) {\r\n            if (block.rowId === this.board.length){\r\n                return false;}\r\n            try {\r\n                if (this.board[block.rowId][block.columnId] !== 'e'){\r\n                    return false;\r\n                }\r\n            } catch (error) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private setNextPosition(nextPosition: PiecePosition) {\r\n        this.nextPosition = nextPosition;\r\n    }\r\n\r\n    getNextPosition = (): PiecePosition => {\r\n        return this.nextPosition;\r\n    }\r\n\r\n    generate(): PiecePosition {\r\n        let blocks: PiecePosition;\r\n        const shapes = ['o', 't', 's', 'z', 'l', 'j', 'i']\r\n        const shape = shapes[Math.floor(Math.random() * shapes.length)]\r\n        switch (shape) {\r\n            case 'o':\r\n                blocks = [\r\n                    new Block('b', 0, 4),\r\n                    new Block('b', 0, 5),\r\n                    new Block('b', 1, 4),\r\n                    new Block('b', 1, 5)\r\n                ];\r\n                break;\r\n            case 't':\r\n                blocks = [\r\n                    new Block('o', 1, 5),\r\n                    new Block('o', 0, 5),\r\n                    new Block('o', 1, 4),\r\n                    new Block('o', 1, 6)\r\n                ]\r\n                break;\r\n            case 's':\r\n                blocks = [\r\n                    new Block('g', 0, 4),\r\n                    new Block('g', 1, 3),\r\n                    new Block('g', 0, 5),\r\n                    new Block('g', 1, 4)\r\n                ]\r\n                break;\r\n            case 'z':\r\n                blocks = [\r\n                    new Block('p', 1, 5),\r\n                    new Block('p', 0, 4),\r\n                    new Block('p', 0, 5),\r\n                    new Block('p', 1, 6)\r\n                ]\r\n                break;\r\n            case 'l':\r\n                blocks = [\r\n                    new Block('y', 0, 4),\r\n                    new Block('y', 0, 3),\r\n                    new Block('y', 0, 5),\r\n                    new Block('y', 1, 3)\r\n                ]\r\n                break;\r\n            case 'j':\r\n                blocks = [\r\n                    new Block('br', 0, 4),\r\n                    new Block('br', 0, 5),\r\n                    new Block('br', 0, 3),\r\n                    new Block('br', 1, 5)\r\n                ]\r\n                break;\r\n            case 'i':\r\n                blocks = [\r\n                    new Block('r', 0, 5),\r\n                    new Block('r', 0, 4),\r\n                    new Block('r', 0, 3),\r\n                    new Block('r', 0, 6)\r\n                ]\r\n                break;\r\n            default: blocks = [\r\n                new Block('b', 0, 4),\r\n                new Block('b', 0, 5),\r\n                new Block('b', 1, 4),\r\n                new Block('b', 1, 5)\r\n            ];\r\n        }\r\n        this.newPiece = true;\r\n        return blocks;\r\n    }\r\n\r\n}\r\n\r\nexport default CurrentPiece;","import Block from './Block';\r\n\r\nclass Row{\r\n\r\n    rowId: number;\r\n    blocks: Block[];\r\n    isFull: boolean;\r\n    \r\n    constructor(rowId: number, blocks: string[]){\r\n        this.rowId = rowId;\r\n        this.blocks = blocks.map((value, index) => {\r\n            return new Block(value, rowId, index)\r\n        })\r\n        this.isFull = !blocks.includes('e');\r\n    }\r\n}\r\n\r\nexport default Row;","import Row from './Row'\r\n\r\nclass Board{\r\n    private rows: Row[];\r\n    private boardArray: string[][]; \r\n    private nextBoard: string[][];\r\n\r\n    constructor(boardArray: string[][]){\r\n        this.boardArray = boardArray;\r\n        this.nextBoard = boardArray;\r\n        this.rows = boardArray.map((row: string[], index: number) => {\r\n            return new Row(index, row);\r\n        })\r\n    }\r\n\r\n    getFullRows = (): number[] => {\r\n        let fullRows: number[] = [];\r\n        this.rows.forEach((row: Row, index: number) => {\r\n            if (row.isFull) fullRows.push(index)\r\n        })\r\n        return fullRows;\r\n    }\r\n\r\n    removeFullRows = (fullRows: number[]): string[][] => {\r\n        //remove current piece\r\n\r\n        //add current piece\r\n\r\n        console.log('remove full rows')\r\n        fullRows.forEach((index: number) => {\r\n            while(index >= 0){\r\n                    if(this.nextBoard[index - 1]){\r\n                        this.nextBoard[index] = this.nextBoard[index - 1]\r\n                    } else {\r\n                        this.nextBoard[index] = ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e']\r\n                    }\r\n                    index--;\r\n            }\r\n        })\r\n        return this.nextBoard;\r\n    }\r\n    \r\n}\r\n\r\nexport default Board;","import React, { CSSProperties } from 'react';\r\n\r\ntype formProps = {\r\n    score: number\r\n}\r\n\r\nclass Form extends React.Component<formProps>{\r\n    state =  {\r\n        name: \"\"\r\n    }\r\n    commonStyle: CSSProperties = {\r\n        display: 'block',\r\n        backgroundColor: 'transparent',\r\n        color: 'white',\r\n        border: '3px solid white',\r\n        borderRadius: '10px',\r\n        fontFamily: 'johnnyFever',\r\n        margin: 'auto',\r\n        fontSize: '26px',\r\n        maxWidth: '80%'\r\n\r\n    }\r\n\r\n    buttonStyle: CSSProperties = {\r\n        ...this.commonStyle,\r\n        cursor: 'pointer',\r\n        marginTop: '26px'\r\n    }\r\n\r\n    inputStyle: CSSProperties = {\r\n        ...this.commonStyle,\r\n        textAlign: 'center',\r\n    }\r\n\r\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({\r\n            name: e.target.value\r\n        })\r\n    }\r\n    submit = (): void => {\r\n        if(this.state.name.length === 3){\r\n            const body = JSON.stringify({name: this.state.name, score: this.props.score});\r\n            fetch('/insertOne', {\r\n                method: \"POST\",\r\n                redirect: \"follow\",\r\n                body: body,\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                  }\r\n            })\r\n            .then(res => window.location.href = '/allScores');\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return <div>\r\n            <p>enter your name</p>\r\n            <input \r\n                style = {this.inputStyle}\r\n                type=\"text\" \r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.handleChange(e)}\r\n                value={this.state.name}\r\n                maxLength={3}/>\r\n            <button \r\n                onClick = {this.submit}\r\n                style = {this.buttonStyle}\r\n            >\r\n                submit\r\n            </button>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { CSSProperties } from 'react';\r\nimport Form from './Form';\r\nimport '../johnny_fever/johnnyFever.ttf';\r\nimport { ScoreList } from '../Types';\r\n\r\ntype ScoreProps = {\r\n    score: number,\r\n    gameOver: boolean,\r\n    startGame: () => void,\r\n    gameStarted: boolean,\r\n    highScores: ScoreList | undefined\r\n}\r\n\r\nconst Score: React.FC<ScoreProps> = (props) => {\r\n\r\n\r\n    let variableText;\r\n    if (!props.gameStarted) {\r\n        variableText = \"click here to play!\"\r\n    } else if (props.gameOver) {\r\n        variableText = \"game over\"\r\n    } else {\r\n        variableText = \"use the arrow keys to play\"\r\n    }\r\n\r\n    const scoreBoard = props.highScores ? <ol style={{fontSize: '20px'}}>{\r\n                        props.highScores.map(row =>\r\n                            <li style={{ padding: '0px' }}>\r\n                                <span style={{width:\"40px\", display: \"inline-block\"}}>{row.name}</span>\r\n                                : \r\n                                <span style={{width:\"75px\", display: \"inline-block\"}}>{`${row.score} PTS`}</span>\r\n                            </li>)}\r\n                        </ol>\r\n                        : <div>Loading high scores...</div>\r\n    let bottom;\r\n    if(props.gameOver){\r\n        bottom = <Form score={props.score}/>\r\n    } else {\r\n        bottom = scoreBoard\r\n    }\r\n\r\n\r\n    const cursor = props.gameStarted ? 'initial' : 'pointer';\r\n\r\n    const animation = props.gameStarted ? \"\" : \"blinker\";\r\n\r\n    const box: CSSProperties = {\r\n        border: \"3px solid rgba(255,255,255,.3)\",\r\n        height: \"150px\",\r\n        width: \"250px\",\r\n        // color: `rgb(255, ${255-props.score}, ${255-props.score})`,\r\n        color: \"white\",\r\n        lineHeight: \"150px\",\r\n        fontSize: \"75px\",\r\n        marginLeft: \"25px\",\r\n        marginBottom: \"10px\",\r\n        borderRadius: \"15px\",\r\n        textAlign: \"center\",\r\n        fontFamily: \"johnnyFever\"\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <div style={box}>\r\n                {props.score}\r\n            </div>\r\n\r\n            <div\r\n                style={{ \r\n                    ...box,\r\n                    height: '435px',\r\n                    lineHeight: 'initial'\r\n                }}\r\n            >\r\n                Tetris\r\n            <div\r\n                    style={{\r\n                        fontSize: '30px',\r\n                        cursor: cursor\r\n                                        }}\r\n                    onClick={props.gameStarted ? () => {} : props.startGame}\r\n                >\r\n                    <span className = {animation}>\r\n                    {variableText}\r\n                    </span>\r\n                    {bottom}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Score;","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport UiRow from './UI/UiRow';\r\nimport Row from './Row';\r\nimport Block from './Block';\r\nimport CurrentPiece from './CurrentPiece';\r\nimport { PiecePosition, BoardArray, ScoreList } from './Types';\r\nimport Board from './Board';\r\nimport Score from './UI/Score';\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const boardArray: string[][] = useSelector((state: any) => state.board);\r\n  const currentPosition: PiecePosition = useSelector((state: any) => state.currentPiece);\r\n  const score: number = useSelector((state: any) => state.score);\r\n  const gravityActive: number = useSelector((state: any) => state.gravityActive)\r\n  const newPiece: boolean = useSelector((state: any) => state.newPiece)\r\n  const gameOver: boolean = useSelector((state: any) => state.gameOver)\r\n  const gameStarted: boolean = useSelector((state: any) => state.gameStarted)\r\n  const highScores: ScoreList = useSelector((state: any) => state.highScores)\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  if(highScores === undefined){\r\n    console.log(\"---FETCHING---\")\r\n    // fetch('http://localhost:4567/getTopTen')\r\n    fetch('/getTopTen')\r\n    .then(res => res.json())\r\n    //.then(res => console.log(res))\r\n    //.then(res => JSON.parse(res))\r\n    .then(res => dispatch({\r\n      type: \"SET_SCORES\",\r\n      scores: res\r\n    }))\r\n  }\r\n \r\n\r\n  let boardCopy = [...boardArray];\r\n\r\n  const currentPiece: CurrentPiece = new CurrentPiece(boardArray, currentPosition);\r\n  const board: Board = new Board(boardArray)\r\n  \r\n\r\n  const fullRows: number[] = newPiece ? board.getFullRows() : [];\r\n  const pauseForAnimation: boolean = new Boolean(fullRows.length).valueOf();\r\n  \r\n  if(fullRows.length){\r\n    const nextScore: number = score + Math.pow(2, fullRows.length);\r\n    let nextBoard = currentPiece.removeFromBoard(boardCopy);\r\n    nextBoard = board.removeFullRows(fullRows);\r\n    nextBoard = currentPiece.addToBoard(nextBoard);\r\n    setTimeout(()=>{\r\n      dispatch({\r\n        type: \"REMOVE_FULL_ROWS\",\r\n        board: nextBoard,\r\n        score: nextScore\r\n      })\r\n    }, 400)\r\n  }\r\n\r\n  const trackPiece = (): void => {\r\n    if(!gameStarted) return;\r\n\r\n    if (!currentPiece.lockCurrentPosition) {\r\n      boardCopy = currentPiece.removeFromBoard(boardCopy);\r\n    }\r\n    boardCopy = currentPiece.addNextToBoard(boardCopy);\r\n    console.log('UPDATE')\r\n    \r\n    dispatch({ \r\n      type: 'UPDATE',\r\n      board: boardCopy,\r\n      currentPiecePosition: currentPiece.nextPosition,\r\n      newPiece: currentPiece.newPiece,\r\n      gravityActive: true,\r\n      score: score,\r\n      gameStarted: true,\r\n      highScores: highScores\r\n    })\r\n  }\r\n\r\n    document.addEventListener('keydown', handler)\r\n\r\n  function handler(e: KeyboardEvent) {\r\n    if ([\"ArrowLeft\", \"ArrowRight\", \"ArrowDown\"].includes(e.key)) {\r\n      if (currentPiece.move(e.key) && !pauseForAnimation) {\r\n        document.removeEventListener('keydown', handler)\r\n        if (!gameIsOver()){\r\n          trackPiece()\r\n        } else {\r\n          endGame()\r\n        }\r\n      }\r\n    }\r\n    if (e.key === \"ArrowUp\") {\r\n      if(currentPiece.rotate() && !pauseForAnimation){\r\n        document.removeEventListener('keydown', handler)\r\n        trackPiece();\r\n      }\r\n    }\r\n  }\r\n\r\n  function gameIsOver(): boolean{\r\n    return !currentPiece.isValidPosition(currentPiece.nextPosition);\r\n  }\r\n\r\n  function endGame(): void{\r\n    dispatch({\r\n      type: \"GAME_OVER\"\r\n    })\r\n  }\r\n\r\n  function startGame(): void{\r\n    console.log('start game');\r\n    dispatch({\r\n      type:\"START_GAME\"\r\n    })\r\n  }\r\n\r\n  const fall = (): void => {\r\n      let event = new KeyboardEvent('keydown', {key:\"ArrowDown\"})\r\n      document.dispatchEvent(event);\r\n  }\r\n\r\n  if(gameStarted && !gravityActive){\r\n    setInterval(fall, 500)\r\n  } \r\n  \r\n  return (\r\n    <div style={{\r\n      display: 'flex',\r\n      paddingTop: '30px',\r\n      justifyContent: 'center'\r\n    }}>\r\n    <div style={{ \r\n        display: 'flex',\r\n        flexDirection: 'column', \r\n        alignItems: 'center',\r\n        justifyContent: 'center' }}>\r\n      {\r\n        boardArray.map((row, index) => \r\n          <UiRow \r\n            key={index} \r\n            row={row} \r\n            rowId={index} \r\n            isFull={fullRows.includes(index)}\r\n            gameOver={gameOver}\r\n            />)\r\n      }\r\n    </div>\r\n    <Score\r\n    score = {score}\r\n    gameOver = {gameOver}\r\n    startGame = {startGame}\r\n    gameStarted = {gameStarted}\r\n    highScores = {highScores}\r\n  />\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore } from 'redux';\r\nimport emptyBoard from './emptyBoard';\r\n\r\nconst initialState = {\r\n    board: emptyBoard,\r\n    currentPiece: undefined,\r\n    gravityActive: false,\r\n    score: 0,\r\n    gameOver: false,\r\n    gameStarted: false,\r\n    highScores: undefined\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    let nextState;\r\n    switch(action.type){\r\n        case 'UPDATE': return {\r\n            board: action.board,\r\n            currentPiece: action.currentPiecePosition,\r\n            gravityActive: true,\r\n            newPiece: action.newPiece,\r\n            score: action.score,\r\n            gameStarted: true,\r\n            highScores: action.highScores\r\n            \r\n        }\r\n        case \"REMOVE_FULL_ROWS\": \r\n            nextState = Object.assign(state, \r\n                {board: action.board},\r\n                {newPiece: false},\r\n                {score: action.score})\r\n            return nextState;\r\n        case \"GAME_OVER\":\r\n            nextState = Object.assign(state, {gameOver: true})\r\n            return nextState;\r\n        case \"START_GAME\":\r\n            nextState = Object.assign(state, {gameStarted: true})\r\n            return nextState;\r\n        case \"SET_SCORES\":\r\n            nextState = Object.assign(state, {highScores: action.scores})\r\n        default: return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n ","const emptyBoard: String[][] = [\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e'],\r\n    ['e','e','e','e','e','e','e','e','e','e']\r\n]\r\n\r\nexport default emptyBoard;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './store/index';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    \r\n    document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\nserviceWorker.register();\r\n\r\n"],"sourceRoot":""}